plugins {
    id 'java'
    id("xyz.jpenilla.run-paper") version "2.3.1"
    id 'maven-publish'
}

group = 'ru.cl_cody'
version = '0.1-DEV'

repositories {
    mavenLocal()                     // чтобы при сборке сначала смотрелось в локальном репо
    mavenCentral()
    maven {
        name = "spigotmc-repo"
        url  = "https://hub.spigotmc.org/nexus/content/repositories/snapshots/"
    }
    maven {
        name = "sonatype"
        url  = "https://oss.sonatype.org/content/groups/public/"
    }
}

dependencies {
    compileOnly("org.spigotmc:spigot-api:1.20.6-R0.1-SNAPSHOT")
}

// -------------------------------------
// ПУБЛИКАЦИЯ В ЛОКАЛЬНЫЙ REPO
// -------------------------------------
publishing {
    publications {
        mavenJava(MavenPublication) {
            // Берём основной “java” компонент, т.е. ваш plugin-jar
            from components.java
            // Артефакт автоматически получит group = project.group, version = project.version
            // По умолчанию artifactId = project.name; можно переопределить, если нужно:
            // artifactId = 'hyperGUIs-api'
        }
    }
    repositories {
        // Локальный репозиторий ~/.m2/repository
        mavenLocal()
    }
}

tasks {
    runServer {
        minecraftVersion("1.20")
    }
}

def targetJavaVersion = 21
java {
    def javaVersion = JavaVersion.toVersion(targetJavaVersion)
    sourceCompatibility = javaVersion
    targetCompatibility = javaVersion
    if (JavaVersion.current() < javaVersion) {
        toolchain.languageVersion = JavaLanguageVersion.of(targetJavaVersion)
    }
}

tasks.withType(JavaCompile).configureEach {
    options.encoding = 'UTF-8'
    if (targetJavaVersion >= 10 || JavaVersion.current().isJava10Compatible()) {
        options.release.set(targetJavaVersion)
    }
}

processResources {
    def props = [version: version]
    inputs.properties props
    filteringCharset 'UTF-8'
    filesMatching('plugin.yml') {
        expand props
    }
}
